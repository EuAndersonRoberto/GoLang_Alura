package main

import (
	"fmt"
	"net/http" //Pacote de requições WEB com Golang
	"os"
)

func main() {

	//exibeIntroducao()

	for { //Golang não faz loop com -> while <- apenas o -> FOR <-
		exibeNomes()
		//exibeMenu()

		comando := leComando()

		switch comando { //outra forma de controlar o fluxo. Não há a necessidade do BREAK já que em GO ele executa o caso selecionado e sair.
		case 1:
			iniciarMonitoramento()
		case 2:
			exibeLogs()
		case 3:
			fmt.Println("Saindo do programa.")
			os.Exit(3) //Pacote os.Exit para informar que saiu com sucesso.
		default:
			fmt.Println("Comando não reconhecido!")
			os.Exit(-1) //O -1 indica que houve algum erro no código ou algo inesperado
		}
	}

}

func exibeIntroducao() {
	nome := "Anderson Roberto"
	versao := 1.5 //hello mundo foi a versão 1.0

	fmt.Println("Olá Sr: ", nome)
	fmt.Println("Programa versão: ", versao)
	fmt.Println("")
}

func leComando() int {
	var comandoLido int
	fmt.Scan(&comandoLido) //A função Scan identifica o tipo pela definição que consta na variável (var comando int)
	//fmt.Scanf("%d", &comando) //com definição de que a variável é um inteiro (%d)
	fmt.Println("")
	fmt.Println("O endereço/ponteiro do meu comando é: ", &comandoLido)
	fmt.Println("O comando escolhido foi: ", comandoLido)
	fmt.Println("")

	return comandoLido
}

func exibeMenu() {
	fmt.Println("")
	fmt.Println("1 - Iniciar monitoramento")
	fmt.Println("2 - Exibir LOG's")
	fmt.Println("3 - Sair do programa")
	fmt.Println("")
}

func iniciarMonitoramento() {
	fmt.Println("Monitorando...")
	var sites [4]string
	sites[0] = "https://random-status-code.herokuapp.com"
	sites[1] = "https://www.alura.com.br"
	sites[2] = "https://www.google.com"
	fmt.Println("Array de sites: ", sites)

	site := "https://www.alura.com.br" //Variável criada com a URL que será verificada
	resp, _ := http.Get(site)          //Requisição de verificação WEB com a variável acima, contendo a URL
	//fmt.Println("Resposta do monitoramento: ", resp)
	if resp.StatusCode == 200 {
		fmt.Println("Site: ", site, "Foi carregado com sucesso!")
	} else {
		fmt.Println("Site: ", site, "Não foi carregado. Status Code:", resp.StatusCode)
	}
}

func exibeLogs() {
	fmt.Println("Apresentando LOG's...")
}

func exibeNomes() { //O slice não tem tamanho ou capacidade definidos, diferente da array que deve ser declarada com seu respectivo taanho.
	nomes := []string{"Anderson", "Mayko", "Karen"}
	fmt.Println("O meu slice tem", len(nomes), "itens")
	fmt.Println("O meu slice tem capacidade para", cap(nomes), "strings.")

	nomes = append(nomes, "Gabriel")
	fmt.Println("O meu slice tem", len(nomes), "itens")
	fmt.Println("O meu slice tem capacidade para", cap(nomes), "strings.")
}
